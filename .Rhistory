# e um arquivo de controle de arquivos
#--------------------------------------
from_arq <- parq
to_arq <- paste0(p_dir_step,
arq_pin,
'_',
basename(parq))
file.rename(from_arq, to_arq)
new_arq <- paste0(p_dir_step,
arq_pin,
'_',
'QTDE_ARQS.TMP')
cat(as.character(qtde_arquivos),file= new_arq, append=FALSE, SEP='\n')
library("data.table")
library("stringi")
library("stringr")
library("future")
library("RMySQL")
library("Dplyr")
plan(multiprocess)
source(paste0("C:/FTP_ESTRUCTURE/Integração generalli/Functions2Work/fn_nm_arq_prd.R"),local = TRUE)
source(paste0("C:/FTP_ESTRUCTURE/Integração generalli/Functions2Work/fnc_vld_cpf_cnpj.R"),local = TRUE)
source(paste0("C:/FTP_ESTRUCTURE/Integração generalli/Functions2Work/fnc_rm_accent.R"),local = TRUE)
Sys.setenv(TZ="America/Sao_Paulo")
p_partner <- "generali"
p_fnc_src <- "C:/FTP_ESTRUCTURE/Integração generalli/Functions2Work/"
p_amb <- "dev"
con_config <- yaml::read_yaml("C:/FTP_ESTRUCTURE/Integração generalli/Files2Work/con_config.yaml")
config <- yaml::read_yaml("C:/FTP_ESTRUCTURE/Integração generalli/Files2Work/config_dev.yaml")
p_partner_dir <- config[[p_partner]][["p_partner_dir"]]
p_amb_dir <- config[[p_partner]][["p_amb_dir"]]
dir_main <- config[[p_partner]][["dir_main"]]
dir_part <- paste0(p_partner_dir,"/",p_amb_dir,"/backup/")
dir_part_scan <- paste0(p_partner_dir,"/",p_amb_dir,"/")
dir_scan <- "uploads"
pdir <- paste0(dir_main,dir_part_scan,dir_scan)
inxspl <- config[[p_partner]][["p_qtd_lot_lnh"]] #quantidade de linhas por arquivo
colidx <- 1 #coluna que sera usada de indice
p_config <- config[[p_partner]]
p_onix <- '7126_7127_7128_7129_7130_7131_7132_7133'
p_cnpj <- p_config$p_cnpj
p_dir_upload <- p_config$dir_upload
p_dir_step <- p_config$dir_step
p_dir_ret <- p_config$dir_ret
p_dir_pre_erro <- p_config$dir_pre_erro
p_dir_backup <- p_config$dir_backup
########################## FUNCAO VALIDA ARQUIVO #################
fn_valida_arq_original <- function(p_onix,
p_nm_arquivo){
p_onix <- as.character(p_onix)
cfg <- yaml::read_yaml(paste0(Sys.getenv("SystemDrive"),"/Files2Work/con_config.yaml"))
mydb_con <- dbConnect(MySQL(),
user=cfg[[toupper(p_amb)]][["SEMPRE"]]$USER,
password=cfg[[toupper(p_amb)]][["SEMPRE"]]$PASSWORD,
dbname=cfg[[toupper(p_amb)]][["SEMPRE"]]$DBNAME,
host=cfg[[toupper(p_amb)]][["SEMPRE"]]$HOST)
query_arq <- paste0('select nm_arquivo ',
' from controle_arquivo ',
' where nm_arquivo = ',
"'",
p_nm_arquivo,
"'")
df_arq_tmp <- dbx::dbxSelect(mydb_con ,statement = query_arq)
dbx::dbxDisconnect(mydb_con)
if(nrow(df_arq_tmp) > 0){
return('EXISTENTE')
}else{
return('NAO_EXISTENTE')
}
}
############################## fn_nome_coluna #########
fn_nome_coluna <- function(p_data_frame,
p_tipo,
p_config){
if (str_detect(toupper(p_tipo),"ADESAO")){
qtd_set_cols <- length(p_config$p_colsnm)
if (qtd_set_cols > 0){
dif_cols <- length(colnames(p_data_frame)) - qtd_set_cols
if (dif_cols > 0){
colnames(p_data_frame) <- c(p_config$p_colsnm,paste("col", 1:dif_cols, sep = ""))
p_data_frame <- p_data_frame[,1:qtd_set_cols]
} else if (dif_cols < 0){
dif_cols <- dif_cols*-1
vt_dif_cols <- p_config$p_colsnm[length(colnames(p_data_frame))+1:dif_cols]
for (rvt in 1:length(vt_dif_cols)) {
p_data_frame <- cbind(p_data_frame,"")
}
colnames(p_data_frame) <- p_config$p_colsnm
} else {
colnames(p_data_frame) <- p_config$p_colsnm
}
}
} else if (str_detect(toupper(p_tipo),"ALTER")){
qtd_set_cols <- length(p_config$p_colsnm_alt)
if (qtd_set_cols > 0){
dif_cols <- length(colnames(p_data_frame)) - qtd_set_cols
if (dif_cols > 0){
colnames(p_data_frame) <- c(p_config$p_colsnm_alt,paste("col", 1:dif_cols, sep = ""))
p_data_frame <- p_data_frame[,1:qtd_set_cols]
} else if (dif_cols < 0){
dif_cols <- dif_cols*-1
vt_dif_cols <- p_config$p_colsnm_alt[length(colnames(p_data_frame))+1:dif_cols]
for (rvt in 1:length(vt_dif_cols)) {
p_data_frame <- cbind(p_data_frame,"")
}
colnames(p_data_frame) <- p_config$p_colsnm_alt
} else {
colnames(p_data_frame) <- p_config$p_colsnm_alt
}
}
}
return(p_data_frame)
}
ls_arq_scan <- list.files(path = p_dir_upload,full.names = T)
ls_arq_scan
for (parq in ls_arq_scan){}
parq
tmp_scan <- toupper(basename(parq))
df_encode <- readr::guess_encoding(parq, n_max = 10000, threshold = 0.2)
if(nrow(df_encode) == 0){
p_tipo_encoding <- 'UTF-8'}else{
p_tipo_encoding <- df_encode$encoding[1]
}
arq_pin <- stri_rand_strings(n=1, length=8, pattern="[1-9]")
leitura <- readLines(parq,encoding = p_tipo_encoding)
leitura <- fnc_rm_accent(leitura)
df_alter <- data.table()
df_adesao <- data.table()
df_dados <- data.table()
qtde_arquivos <- 0
ret_arq_processado <- fn_valida_arq_original(p_onix,
basename(parq))
dados_leitura_adesao <- leitura[substr(leitura,1,1) == "1"]
dados_leitura_cancelamento <- leitura[substr(leitura,1,1) == "2"]
if(length(dados_leitura_adesao) > 0){
df_adesao <- data.frame("TIPO DE ACAO"        = trimws(substr(dados_leitura_adesao, 1, 1)),
"CARTAO OU CNPJ"      = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["CNPJ_EMPRESA"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["CNPJ_EMPRESA"]]$pos_fin)),
PRODUTO               = " ",
PLANO                 = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["PLANO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["PLANO"]]$pos_fin)),
CPF                   = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["CPF"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["CPF"]]$pos_fin)),
"NOME COMPLETO"       = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["NOME_COMPLETO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["NOME_COMPLETO"]]$pos_fin)),
LOGRADOURO            = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["LOGRADOURO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["LOGRADOURO"]]$pos_fin)),
NUMERO                = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["NUMEROENDERECO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["NUMEROENDERECO"]]$pos_fin)),
COMPLEMENTO           = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["COMPLEMENTO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["COMPLEMENTO"]]$pos_fin)),
BAIRRO                = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["BAIRRO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["BAIRRO"]]$pos_fin)),
CIDADE                = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["CIDADE"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["CIDADE"]]$pos_fin)),
UF                    = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["ESTADO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["ESTADO"]]$pos_fin)),
CEP                   = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["CEP"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["CEP"]]$pos_fin)),
TELEFONE              = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["TELEFONE"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["TELEFONE"]]$pos_fin)),
EMAIL                 = " ",
"DATA DE NASCIMENTO"  = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["DATA_DE_NASCIMENTO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["DATA_DE_NASCIMENTO"]]$pos_fin)),
SEXO                  = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["SEXO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["SEXO"]]$pos_fin)),
IDENTIFICACAO_EXTERNA = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["IDENTIFICACAO_EXTERNA"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["IDENTIFICACAO_EXTERNA"]]$pos_fin)),
stringsAsFactors = FALSE)
for (onix in 1:nrow(df_adesao)) {
if (df_adesao$PLANO[onix] == "PLANO 0322") {
df_adesao$PRODUTO[onix]<- "7126"
}
if (df_adesao$PLANO[onix] == "PLANO 0422") {
df_adesao$PRODUTO[onix]<- "7127"
}
if (df_adesao$PLANO[onix] == "PLANO 0522") {
df_adesao$PRODUTO[onix]<- "7128"
}
if (df_adesao$PLANO[onix] == "PLANO 0622") {
df_adesao$PRODUTO[onix]<- "7129"
}
if (df_adesao$PLANO[onix] == "PLANO 0722") {
df_adesao$PRODUTO[onix]<- "7130"
}
if (df_adesao$PLANO[onix] == "PLANO 0822") {
df_adesao$PRODUTO[onix]<- "7131"
}
if (df_adesao$PLANO[onix] == "PLANO 0922") {
df_adesao$PRODUTO[onix]<- "7132"
}
if (df_adesao$PLANO[onix] == "PLANO 1022") {
df_adesao$PRODUTO[onix]<- "7133"
}
}
df_adesao$SEXO <- sapply(df_adesao$SEXO, function(x){ ifelse(x %in% c(" ","1","M"),"M","F")})
df_adesao$CPF <- stringr::str_pad(as.numeric(df_adesao$CPF),11,side='left','0')
df_adesao <- df_adesao %>%
dplyr::mutate_all(as.character)
df_adesao <- df_adesao %>%
select(!PLANO)
}
library("dplyr")
df_adesao <- df_adesao %>%
select(!PLANO)
ret_arq_processado <- fn_valida_arq_original(p_onix,
basename(parq))
dados_leitura_adesao <- leitura[substr(leitura,1,1) == "1"]
dados_leitura_cancelamento <- leitura[substr(leitura,1,1) == "2"]
if(length(dados_leitura_adesao) > 0){
df_adesao <- data.frame("TIPO DE ACAO"        = trimws(substr(dados_leitura_adesao, 1, 1)),
"CARTAO OU CNPJ"      = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["CNPJ_EMPRESA"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["CNPJ_EMPRESA"]]$pos_fin)),
PRODUTO               = " ",
PLANO                 = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["PLANO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["PLANO"]]$pos_fin)),
CPF                   = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["CPF"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["CPF"]]$pos_fin)),
"NOME COMPLETO"       = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["NOME_COMPLETO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["NOME_COMPLETO"]]$pos_fin)),
LOGRADOURO            = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["LOGRADOURO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["LOGRADOURO"]]$pos_fin)),
NUMERO                = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["NUMEROENDERECO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["NUMEROENDERECO"]]$pos_fin)),
COMPLEMENTO           = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["COMPLEMENTO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["COMPLEMENTO"]]$pos_fin)),
BAIRRO                = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["BAIRRO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["BAIRRO"]]$pos_fin)),
CIDADE                = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["CIDADE"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["CIDADE"]]$pos_fin)),
UF                    = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["ESTADO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["ESTADO"]]$pos_fin)),
CEP                   = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["CEP"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["CEP"]]$pos_fin)),
TELEFONE              = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["TELEFONE"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["TELEFONE"]]$pos_fin)),
EMAIL                 = " ",
"DATA DE NASCIMENTO"  = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["DATA_DE_NASCIMENTO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["DATA_DE_NASCIMENTO"]]$pos_fin)),
SEXO                  = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["SEXO"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["SEXO"]]$pos_fin)),
IDENTIFICACAO_EXTERNA = trimws(substr(dados_leitura_adesao, p_config[["CAMPOS_ADESAO"]][["IDENTIFICACAO_EXTERNA"]]$pos_ini, p_config[["CAMPOS_ADESAO"]][["IDENTIFICACAO_EXTERNA"]]$pos_fin)),
stringsAsFactors = FALSE)
for (onix in 1:nrow(df_adesao)) {
if (df_adesao$PLANO[onix] == "PLANO 0322") {
df_adesao$PRODUTO[onix]<- "7126"
}
if (df_adesao$PLANO[onix] == "PLANO 0422") {
df_adesao$PRODUTO[onix]<- "7127"
}
if (df_adesao$PLANO[onix] == "PLANO 0522") {
df_adesao$PRODUTO[onix]<- "7128"
}
if (df_adesao$PLANO[onix] == "PLANO 0622") {
df_adesao$PRODUTO[onix]<- "7129"
}
if (df_adesao$PLANO[onix] == "PLANO 0722") {
df_adesao$PRODUTO[onix]<- "7130"
}
if (df_adesao$PLANO[onix] == "PLANO 0822") {
df_adesao$PRODUTO[onix]<- "7131"
}
if (df_adesao$PLANO[onix] == "PLANO 0922") {
df_adesao$PRODUTO[onix]<- "7132"
}
if (df_adesao$PLANO[onix] == "PLANO 1022") {
df_adesao$PRODUTO[onix]<- "7133"
}
}
df_adesao$SEXO <- sapply(df_adesao$SEXO, function(x){ ifelse(x %in% c(" ","1","M"),"M","F")})
df_adesao$CPF <- stringr::str_pad(as.numeric(df_adesao$CPF),11,side='left','0')
df_adesao <- df_adesao %>%
dplyr::mutate_all(as.character)
df_adesao <- df_adesao %>%
select(!PLANO)
}
if(length(dados_leitura_cancelamento) > 0){
df_alter <- data.frame("TIPO DE ACAO"         = "3",
PLANO                 = trimws(substr(dados_leitura_cancelamento, p_config[["CAMPOS_ALTERACAO"]][["PLANO"]]$pos_ini, p_config[["CAMPOS_ALTERACAO"]][["PLANO"]]$pos_fin)),
PRODUTO               = " ",
CPF                   = " ",
"CARTAO OU CNPJ"      = trimws(substr(dados_leitura_cancelamento, p_config[["CAMPOS_ALTERACAO"]][["CNPJ_EMPRESA"]]$pos_ini, p_config[["CAMPOS_ALTERACAO"]][["CNPJ_EMPRESA"]]$pos_fin)),
IDENTIFICADOR_EXTERNO = trimws(substr(dados_leitura_cancelamento, p_config[["CAMPOS_ALTERACAO"]][["IDENTIFICADOR_EXTERNO"]]$pos_ini, p_config[["CAMPOS_ALTERACAO"]][["IDENTIFICADOR_EXTERNO"]]$pos_fin)),
stringsAsFactors = FALSE)
for (onix in 1:nrow(df_alter)) {
if (df_alter$PLANO[onix] == "PLANO 0322") {
df_alter$PRODUTO[onix]<- "7126"
}
if (df_alter$PLANO[onix] == "PLANO 0422") {
df_alter$PRODUTO[onix]<- "7127"
}
if (df_alter$PLANO[onix] == "PLANO 0522") {
df_alter$PRODUTO[onix]<- "7128"
}
if (df_alter$PLANO[onix] == "PLANO 0622") {
df_alter$PRODUTO[onix]<- "7129"
}
if (df_alter$PLANO[onix] == "PLANO 0722") {
df_alter$PRODUTO[onix]<- "7130"
}
if (df_alter$PLANO[onix] == "PLANO 0822") {
df_alter$PRODUTO[onix]<- "7131"
}
if (df_alter$PLANO[onix] == "PLANO 0922") {
df_alter$PRODUTO[onix]<- "7132"
}
if (df_alter$PLANO[onix] == "PLANO 1022") {
df_alter$PRODUTO[onix]<- "7133"
}
}
df_alter <- df_alter %>%
select(!PLANO)
df_alter$CPF <- stringr::str_pad(as.numeric(df_alter$CPF),11,side='left','0')
df_alter <- df_alter %>%
dplyr::mutate_all(as.character)
mydb_sempre <- dbConnect(MySQL(),
user=con_config[[toupper(p_amb)]][["SEMPRE"]]$USER,
password=con_config[[toupper(p_amb)]][["SEMPRE"]]$PASSWORD,
dbname=con_config[[toupper(p_amb)]][["SEMPRE"]]$DBNAME,
host=con_config[[toupper(p_amb)]][["SEMPRE"]]$HOST)
#query_base <-paste0("select cartao.identificador_externo, cliente.cnpj_cpf, produto.codigo_d From cartao, cliente, produto
#where cartao.cliente_id = cliente.id
#and cartao.produto_id = produto.id
#and cartao.status = '1'
#and produto.codigo_d in (7126, 7127, 7128, 7129, 7130, 7131, 7132, 7133)")
query_base <-paste0("select cartao.identificador_externo IDENTIFICADOR_EXTERNO, cliente.cnpj_cpf CPF From cartao, cliente, produto
where cartao.cliente_id = cliente.id
and cartao.produto_id = produto.id
and cartao.status = '1'
and produto.id = '256'
LIMIT 10;")
df_base <- dbx::dbxSelect(mydb_sempre,query_base)
dbDisconnect(mydb_sempre)
}
df_alter <- left_join(df_base, df_alter, by = "IDENTIFICADOR_EXTERNO")
df_alter <- df_alter %>% filter(!is.na(IDENTIFICADOR_EXTERNO))
df_alter <- df_alter %>%
select(TIPO.DE.ACAO, PRODUTO, CPF.x, CARTAO.OU.CNPJ)
colnames(df_alter)[3] <- "CPF"
nrow(df_adesao
)
qtde_arquivos <- qtde_arquivos + 1
new_arq <- paste0(p_dir_upload,
arq_pin,
'_',
'ADESAO_',
p_onix,
'.CSV')
df_adesao <- fn_nome_coluna(df_adesao,
'ADESAO',
p_config)
data.table::fwrite(df_adesao,file = new_arq, append = FALSE, sep = ';', col.names = TRUE,  quote = FALSE)
if(nrow(df_adesao) > 0){
qtde_arquivos <- qtde_arquivos + 1
new_arq <- paste0(p_dir_upload,
arq_pin,
'_',
'ADESAO_',
p_onix,
'.CSV')
df_adesao <- fn_nome_coluna(df_adesao,
'ADESAO',
p_config)
data.table::fwrite(df_adesao,file = new_arq, append = FALSE, sep = ';', col.names = TRUE,  quote = FALSE)
}
if(nrow(df_alter) > 0){
qtde_arquivos <- qtde_arquivos + 1
new_arq <- paste0(p_dir_upload,
arq_pin,
'_',
'ALTERST_',
p_onix,
'.CSV')
df_alter <- fn_nome_coluna(df_alter,
'ALTERST',
p_config)
data.table::fwrite(df_alter,file = new_arq, append = FALSE, sep = ';', col.names = TRUE,  quote = FALSE)
}
#--------------------------------------
# coloco o arquivo original no step
# e um arquivo de controle de arquivos
#--------------------------------------
from_arq <- parq
to_arq <- paste0(p_dir_step,
arq_pin,
'_',
basename(parq))
file.rename(from_arq, to_arq)
new_arq <- paste0(p_dir_step,
arq_pin,
'_',
'QTDE_ARQS.TMP')
cat(as.character(qtde_arquivos),file= new_arq, append=FALSE, SEP='\n')
mydb_sempre <- dbConnect(MySQL(),
user=config[[toupper(pAmb)]][["SEMPRE"]]$USER,
password=config[[toupper(pAmb)]][["SEMPRE"]]$PASSWORD,
dbname=config[[toupper(pAmb)]][["SEMPRE"]]$DBNAME,
host=config[[toupper(pAmb)]][["SEMPRE"]]$HOST)
Sys.setenv(TZ="America/Sao_Paulo")
### CARREGA BIBLIOTECAS
library("dplyr")
library("httr")
library("jsonlite")
library("RMySQL")
config <- yaml::read_yaml("C:/Users/erick.luiz/Desktop/CON_CONFIG API/con_config.yaml")
config <- yaml::read_yaml("C:/Users/erick.luiz/Desktop/Arquivos R/CON_CONFIG API/con_config.yaml")
source(paste0(Sys.getenv("SystemDrive"),"/Functions2Work/fn_get_titular_dependentes.R"),local = TRUE)
mydb_sempre <- dbConnect(MySQL(),
user=config[[toupper(pAmb)]][["SEMPRE"]]$USER,
password=config[[toupper(pAmb)]][["SEMPRE"]]$PASSWORD,
dbname=config[[toupper(pAmb)]][["SEMPRE"]]$DBNAME,
host=config[[toupper(pAmb)]][["SEMPRE"]]$HOST)
pAmb="QA"
query_token <-paste0("select token_integracao_conexa, link_magico_proprio from produto
where produto.codigo_d ='",p_Onix,"'")
pAmb <- "QA"
p_cpf_titular <- "03986572627"
p_Onix <- "7110"
p_ip="18.299.299.209"
p_onix = "7110"
mydb_sempre <- dbConnect(MySQL(),
user=config[[toupper(pAmb)]][["SEMPRE"]]$USER,
password=config[[toupper(pAmb)]][["SEMPRE"]]$PASSWORD,
dbname=config[[toupper(pAmb)]][["SEMPRE"]]$DBNAME,
host=config[[toupper(pAmb)]][["SEMPRE"]]$HOST)
query_token <-paste0("select token_integracao_conexa, link_magico_proprio from produto
where produto.codigo_d ='",p_Onix,"'")
query_onix <-paste0("select descricao_d, codigo_d from produto
where produto.codigo_d ='",p_Onix,"'")
df_token <- dbx::dbxSelect(mydb_sempre,query_token)
df_onix <- dbx::dbxSelect(mydb_sempre,query_onix)
nrow(df_onix) > 0
df_onix
df_token
df_token
p_token_conexa <- df_token$token_integracao_conexa
p_token_conexa
active_patients <- config[[toupper(pAmb)]]$CONEXA$active_patients
term_accept <- config[[toupper(pAmb)]]$CONEXA$term_accept
term_accept
active_patients
!df_token$link_magico_proprio == 'S'
if (nchar(p_cpf_titular) > 0) {
v_cpf_find <- p_cpf_titular
} else if (nchar(p_cpf_dependente) > 0) {
v_cpf_find <- p_cpf_dependente}
URL <- paste0(config[[toupper(pAmb)]]$CONEXA$URL_patients_cpf, v_cpf_find)
raw_response <- GET(url=URL,
add_headers("Content-Type"=config[[toupper(pAmb)]]$CONEXA$HEADER_ContentType),
add_headers("token" = p_token_conexa),
encode = config[[toupper(pAmb)]]$CONEXA$BODY_encode)
response <- content(raw_response, "text", encoding = "UTF-8")
ret <- jsonlite::fromJSON(response)
ret
id <- as.character(ret$object$patient$id)
df_env_fila <- data.frame(id)
nrow(df_env_fila)>0
active_patients
URL <- paste0(config[[toupper(pAmb)]]$CONEXA$URL_patients,"/",df_env_fila$id,"/activate")
URL
add_headers
p_token_conexa
fnc_post_api <- function(){
raw_response <- httr::GET(URL,
add_headers("Content-Type"=config[[toupper(pAmb)]]$CONEXA$HEADER_ContentType),
add_headers("token" = p_token_conexa),
encode = config[[toupper(pAmb)]]$CONEXA$BODY_encode
#,verbose()
)
return(raw_response)
}
tmp_exc <- system.time(raw_response <- fnc_post_api())
response <- content(raw_response, "text", encoding = "UTF-8")
ret <- jsonlite::fromJSON(response)
ret
URL <- config[[toupper(pAmb)]]$CONEXA$URL_appointment_term
p_body_term <- list(idPatient = df_env_fila$id,ip = p_ip)
p_body_term
fnc_post_api <- function(){
raw_response <- httr::POST(URL,
add_headers("Content-Type"=config[[toupper(pAmb)]]$CONEXA$HEADER_ContentType),
add_headers("token" = p_token_conexa),
body = p_body_term,
encode = config[[toupper(pAmb)]]$CONEXA$BODY_encode
#,verbose()
)
return(raw_response)
}
tmp_exc <- system.time(raw_response <- fnc_post_api())
response <- content(raw_response, "text", encoding = "UTF-8")
!(raw_response$status_code >= 200 && raw_response$status_code < 300)
ret <- jsonlite::fromJSON(response)
p_mgk_lnk
p_mgk_lnk
p_mgk_lnk=TRUE
p_mgk_lnk
URL <- paste0(config[[toupper(pAmb)]]$CONEXA$URL_magiclink,df_env_fila$id)
URL
fnc_post_api <- function(){
raw_response <- httr::GET(URL,
add_headers("Content-Type"=config[[toupper(pAmb)]]$CONEXA$HEADER_ContentType),
add_headers("token" = p_token_conexa),
encode = config[[toupper(pAmb)]]$CONEXA$BODY_encode
#,verbose()
)
return(raw_response)
}
tmp_exc <- system.time(raw_response <- fnc_post_api())
response <- content(raw_response, "text", encoding = "UTF-8")
raw_response$status_code >= 200 && raw_response$status_code < 300
ret <- jsonlite::fromJSON(response)
list_ret <- list(object = ret$object,
status_code = raw_response$status_code)
dbDisconnect(mydb_sempre)
View(list_ret)
View(mydb_sempre)
View(list_ret)
list_ret[["object"]][["linkMagicoWeb"]]
shiny::runApp('C:/Users/erick.luiz/Desktop/dashboard-shiny-argon')
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
input$cardWrap == "Enable"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
input
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
